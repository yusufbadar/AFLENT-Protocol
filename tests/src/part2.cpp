#include <gtest/gtest.h>
#include <random>

#include "tests_utils.h"

extern "C"
{
#include "hw2.h"
}

class part2_tests : public testing::Test
{
private:
    void SetUp() override {}
};

TEST_F(part2_tests, BasicPacket) //One Packet, 2 ints, no endian
{
    const int length =11;
    const unsigned char expected[11]{0xC, 0x0, 0x11, 0x12, 0x34, 0x56, 0x78, 0xAB, 0xCD, 0xEF, 0x1};
    unsigned char *output;
    int data[] = {0x12345678, (int)0xABCDEF01};
    int values = 2;
    int max_frag = 8;
    output=build_packets(data,values,max_frag,0,3);
    for (auto i = 0; i < length; ++i)
        ASSERT_EQ(output[i], expected[i]) << "Failed for byte " RED_MSG << std::hex << i << std::dec << COLOR_END;
}

TEST_F(part2_tests, BasicPacketEndian) //One Packet, 2 ints, w/ endian
{
    const int length =11;
    const unsigned char expected[11]{0x10, 0x0, 0x13, 0x78, 0x56, 0x34, 0x12, 0x1, 0xEF, 0xCD, 0xAB};
    unsigned char *output;
    int data[] = {0x12345678, (int)0xABCDEF01};
    int values = 2;
    int max_frag = 8;
    output=build_packets(data,values,max_frag,1,4);
    for (auto i = 0; i < length; ++i)
        ASSERT_EQ(output[i], expected[i]) << "Failed for byte " RED_MSG << std::hex << i << std::dec << COLOR_END;
}

TEST_F(part2_tests, BasicPacketFrag) //Two Fragments, 2 ints, no endian
{
    const int length =14;
    const unsigned char expected[14]{0x18, 0x0, 0x8, 0x12, 0x34, 0x56, 0x78, 0x18, 0x20, 0x9, 0xAB, 0xCD, 0xEF, 0x1};
    unsigned char *output;
    int data[] = {0x12345678, (int)0xABCDEF01};
    int values = 2;
    int max_frag = 4;
    output=build_packets(data,values,max_frag,0,6);
    for (auto i = 0; i < length; ++i)
        ASSERT_EQ(output[i], expected[i]) << "Failed for byte " RED_MSG << std::hex << i << std::dec << COLOR_END;
}

TEST_F(part2_tests, SmallTest) //8253 ints
{
    srand(235123);
    const int length =1676;
const unsigned char expected[1676]{0x98, 0x0, 0x40, 0xA, 0x9D, 0x34, 0x6C, 0x3C, 0x1, 0x59, 0x94, 0x22, 0x1E, 0x73, 0xF5, 0x51, 0x77, 0x14, 0xAE, 0x37, 0x65, 0x1A, 0x49, 0x25, 0x9B, 0xFF, 0x98, 0x7F, 0x65, 0x34, 0x4, 0x58, 0x0, 0xFE, 0x5C, 0x98, 0x20, 0x40, 0x2F, 0x73, 0x9A, 0xDA, 0x3D, 0x43, 0x2D, 0xD9, 0x2E, 0x64, 0x9, 0x81, 0x2A, 0x73, 0xDB, 0xB7, 0x7C, 0xED, 0xAD, 0xA8, 0x70, 0xD1, 0x77, 0x5A, 0x3B, 0x8F, 0x37, 0x74, 0x6B, 0xD8, 0x36, 0x8F, 0x98, 0x40, 0x40, 0x34, 0xAD, 0x1C, 0x23, 0x2E, 0x90, 0x4, 0xE8, 0x57, 0x4E, 0x84, 0x53, 0x5A, 0x7E, 0x84, 0x25, 0x4D, 0x54, 0x2B, 0x3F, 0x4B, 0xC7, 0x1D, 0x30, 0x8, 0x7A, 0xB7, 0x18, 0x2, 0xAC, 0x5F, 0xCF, 0x98, 0x60, 0x40, 0x46, 0x58, 0x33, 0xEA, 0x70, 0xD8, 0xB4, 0xBD, 0x7, 0xF2, 0xE8, 0x2C, 0x41, 0xA2, 0x7F, 0x76, 0x37, 0x8E, 0xC8, 0x52, 0x35, 0xEC, 0x6C, 0x5E, 0x67, 0x81, 0x4, 0xF5, 0x42, 0x2B, 0xFC, 0xBE, 0x98, 0x80, 0x40, 0x71, 0xED, 0xC5, 0xF2, 0x9, 0x9F, 0x78, 0xEA, 0x13, 0xA3, 0x11, 0x6C, 0x29, 0x52, 0xE0, 0x3C, 0x2F, 0x3B, 0x78, 0x82, 0x13, 0x8, 0x45, 0x70, 0x1, 0x53, 0xDE, 0x98, 0x5E, 0xAF, 0x13, 0x5D, 0x98, 0xA0, 0x40, 0x50, 0x4B, 0x73, 0x4A, 0x2F, 0xB7, 0xE8, 0x1A, 0x9, 0x22, 0xEF, 0x14, 0x4D, 0x39, 0x20, 0xF2, 0x20, 0x89, 0x5F, 0x74, 0x44, 0xB2, 0x26, 0x88, 0x39, 0x11, 0x57, 0x81, 0x55, 0x36, 0x7B, 0x97, 0x98, 0xC0, 0x40, 0x73, 0x42, 0x2B, 0x71, 0x10, 0x5F, 0xDB, 0xD5, 0x2F, 0xB4, 0xFF, 0xBC, 0x40, 0x96, 0x56, 0xB0, 0x5C, 0x26, 0xF9, 0x5, 0x38, 0x2F, 0xB6, 0xD4, 0x43, 0x42, 0xB6, 0x80, 0x22, 0x7F, 0x2C, 0xEF, 0x98, 0xE0, 0x40, 0x29, 0x8, 0x6B, 0x91, 0x4B, 0x35, 0x9E, 0xAC, 0x64, 0x21, 0xAC, 0x65, 0x60, 0x97, 0x33, 0xE3, 0x1, 0x22, 0xB, 0xA, 0x4B, 0xA2, 0xB1, 0x5A, 0x22, 0xC3, 0x30, 0xA1, 0x73, 0xF, 0xD0, 0xFD, 0x99, 0x0, 0x40, 0x55, 0x42, 0x2A, 0x44, 0x36, 0x66, 0x42, 0xD, 0x1C, 0x62, 0xB1, 0x39, 0x4, 0x7D, 0xA2, 0xC7, 0x49, 0x6E, 0x87, 0x7E, 0x1D, 0xB6, 0x8F, 0xD1, 0x63, 0x2C, 0xB6, 0x24, 0x19, 0xB9, 0xFA, 0xC8, 0x99, 0x20, 0x40, 0x4D, 0x6E, 0x77, 0xEB, 0x6C, 0x4F, 0xA5, 0x38, 0x66, 0xF3, 0x1B, 0xBA, 0x6D, 0xF7, 0xD7, 0x5F, 0x31, 0x1, 0xCB, 0xC1, 0x20, 0x4, 0x73, 0x3B, 0x43, 0x2E, 0x52, 0xF6, 0x24, 0x43, 0xF7, 0x32, 0x99, 0x40, 0x40, 0x30, 0x64, 0x4F, 0x10, 0x72, 0xE3, 0x52, 0xB2, 0x64, 0xDA, 0x4D, 0xE2, 0xC, 0x8B, 0x48, 0x16, 0x2B, 0x13, 0x9, 0x87, 0x28, 0x1D, 0x4, 0x62, 0x2F, 0xA, 0x75, 0x5, 0x54, 0x1B, 0x75, 0x18, 0x99, 0x60, 0x40, 0x73, 0x52, 0xA3, 0xF, 0x13, 0x2C, 0x21, 0x6B, 0x34, 0xB2, 0xA8, 0xFC, 0x74, 0x74, 0xAE, 0x19, 0x5E, 0xCE, 0xD2, 0xC5, 0x57, 0x75, 0xD9, 0x9D, 0x67, 0x84, 0x7F, 0x16, 0x34, 0x10, 0xFD, 0xA, 0x99, 0x80, 0x40, 0xD, 0xDC, 0x1B, 0xAB, 0x3, 0xE7, 0x30, 0x4F, 0x38, 0x8E, 0x9F, 0xD1, 0x57, 0x4A, 0xA3, 0x29, 0x21, 0x9D, 0xC0, 0x21, 0x1B, 0xBB, 0x55, 0xF5, 0x71, 0x4, 0x9D, 0xF1, 0x6F, 0xC, 0x38, 0xC, 0x99, 0xA0, 0x40, 0x8, 0xA, 0xFB, 0x2D, 0x57, 0xF7, 0xB9, 0xAB, 0x5D, 0x4, 0xF, 0x6C, 0x39, 0xC, 0xC6, 0xEE, 0x77, 0xFC, 0x2C, 0xE6, 0x20, 0x32, 0x62, 0x62, 0x5D, 0x50, 0xBE, 0x20, 0x28, 0x60, 0x7B, 0xF7, 0x99, 0xC0, 0x40, 0x13, 0x15, 0xB5, 0x15, 0x42, 0x2B, 0xC, 0x3, 0x34, 0xEB, 0xC4, 0xD, 0x3E, 0x28, 0xBE, 0x9C, 0x6A, 0x48, 0x10, 0x65, 0x63, 0xF6, 0x39, 0x12, 0x12, 0x44, 0x33, 0xB4, 0x5D, 0x9A, 0xB3, 0x74, 0x99, 0xE0, 0x40, 0x77, 0x22, 0x5A, 0x7D, 0x46, 0xF6, 0xDC, 0xB0, 0x52, 0xF, 0x61, 0x8E, 0x55, 0xF1, 0x2D, 0x43, 0x1E, 0x6C, 0xB6, 0x4E, 0x39, 0x93, 0xE0, 0xA4, 0xA, 0x2, 0x2A, 0x4D, 0x2C, 0x48, 0xD1, 0xF9, 0x9A, 0x0, 0x40, 0x3D, 0x7B, 0x10, 0xF4, 0x42, 0x90, 0xCA, 0x1E, 0x3, 0x93, 0x75, 0x22, 0x5F, 0x18, 0xD1, 0x15, 0x5E, 0x4C, 0x20, 0x13, 0x74, 0x98, 0x13, 0x13, 0x4E, 0x25, 0x9, 0x21, 0x66, 0x57, 0x1B, 0x40, 0x9A, 0x20, 0x40, 0x4C, 0x8F, 0xCC, 0xBE, 0x2B, 0x29, 0x18, 0x8D, 0x1F, 0x63, 0xE2, 0x2F, 0x44, 0x8B, 0xF9, 0xA4, 0x4B, 0x5B, 0x7A, 0xF0, 0x7C, 0xB4, 0xA0, 0x4F, 0x6C, 0xEC, 0x75, 0x9B, 0x5E, 0x71, 0x30, 0x5, 0x9A, 0x40, 0x40, 0x3E, 0xDF, 0xAC, 0x52, 0x21, 0xD8, 0x39, 0xA8, 0x1C, 0x99, 0xEE, 0xA1, 0x29, 0x27, 0xBC, 0xB8, 0x5, 0xCE, 0x72, 0xBB, 0x2E, 0xDE, 0x22, 0x55, 0x6, 0xC2, 0x70, 0x2C, 0x7C, 0xF0, 0xCD, 0x38, 0x9A, 0x60, 0x40, 0x75, 0xD4, 0xFF, 0x6, 0x58, 0xD1, 0xD1, 0xBA, 0x52, 0xE1, 0xFA, 0x7B, 0x14, 0x41, 0xB5, 0x54, 0x12, 0x65, 0xB2, 0x5F, 0x5C, 0xE4, 0x24, 0xC8, 0x40, 0x8A, 0x87, 0x4D, 0x4F, 0xE0, 0xC3, 0x53, 0x9A, 0x80, 0x40, 0x1F, 0x74, 0xEE, 0xE6, 0x44, 0x1D, 0xFC, 0x6F, 0x2E, 0xF9, 0x94, 0x68, 0x7D, 0xC1, 0xE, 0xF9, 0x38, 0xB6, 0xF, 0x82, 0x7D, 0x1E, 0x9D, 0x89, 0x64, 0x18, 0x2A, 0x3A, 0x5, 0x45, 0xDC, 0x40, 0x9A, 0xA0, 0x40, 0x28, 0x47, 0xB6, 0x17, 0x3, 0x7C, 0xC, 0x69, 0x49, 0xD1, 0xD5, 0xE4, 0x73, 0xA3, 0x31, 0x7, 0x0, 0x30, 0xAC, 0xB8, 0x36, 0xBE, 0x4B, 0x80, 0x52, 0x14, 0x61, 0xC, 0x3F, 0x10, 0x59, 0xB, 0x9A, 0xC0, 0x40, 0x58, 0x96, 0x85, 0x28, 0x6E, 0xAE, 0x4F, 0xAD, 0x68, 0x38, 0x15, 0xC3, 0x5E, 0x64, 0xF7, 0xE3, 0x1D, 0x8C, 0x72, 0x2, 0x6E, 0xFA, 0x85, 0xEF, 0x5B, 0x55, 0xC5, 0x1C, 0x13, 0x61, 0x71, 0x8, 0x9A, 0xE0, 0x40, 0x47, 0xCC, 0x57, 0xAA, 0x2E, 0x37, 0xBF, 0x97, 0x27, 0xA3, 0x26, 0x5C, 0x5A, 0x32, 0xA, 0x9, 0xB, 0x1B, 0xE4, 0x60, 0x68, 0x2D, 0xAD, 0xA9, 0x2A, 0x12, 0xCD, 0x5C, 0x2A, 0x90, 0xD3, 0x46, 0x9B, 0x0, 0x40, 0x2C, 0x4B, 0xAA, 0x18, 0x59, 0xC, 0x61, 0xC4, 0x28, 0x51, 0xE2, 0x40, 0x65, 0x1, 0xB9, 0x9A, 0x56, 0x2A, 0xFF, 0x4D, 0xC, 0x6A, 0xC, 0x7A, 0x6A, 0x47, 0x95, 0xDA, 0x7E, 0x72, 0xB5, 0x64, 0x9B, 0x20, 0x40, 0xF, 0xE6, 0x18, 0xE3, 0x34, 0x19, 0x6B, 0xBF, 0x72, 0x15, 0xE6, 0x6B, 0x10, 0x16, 0xC5, 0x9B, 0x6A, 0xD7, 0xB7, 0x3F, 0x44, 0x2A, 0x47, 0x77, 0x4F, 0x27, 0x1E, 0xA6, 0x43, 0x6E, 0x3C, 0x67, 0x9B, 0x40, 0x40, 0x32, 0xD8, 0x97, 0x24, 0x37, 0x5F, 0x34, 0x69, 0x21, 0xD3, 0x34, 0x4B, 0x50, 0x65, 0x9, 0x27, 0x26, 0x59, 0xBA, 0x59, 0x7D, 0x28, 0xF9, 0x67, 0x63, 0xC6, 0x7A, 0x2F, 0x6E, 0x26, 0x12, 0x3, 0x9B, 0x60, 0x40, 0x2B, 0x60, 0xB8, 0xFE, 0xB, 0x69, 0xA0, 0x8C, 0x48, 0x58, 0x1C, 0xC, 0x36, 0x7C, 0x9D, 0x5E, 0x73, 0x97, 0x4E, 0x35, 0x72, 0x6A, 0xE9, 0x68, 0x61, 0xD, 0x70, 0xA5, 0x1F, 0xE2, 0xF8, 0x4E, 0x9B, 0x80, 0x40, 0x4B, 0x77, 0x4B, 0x2C, 0x9, 0x5F, 0x52, 0xE5, 0x4, 0xE4, 0xB1, 0xE8, 0x21, 0xA2, 0x4A, 0x79, 0x15, 0xC9, 0x5F, 0x5F, 0x6F, 0x2C, 0x47, 0xC3, 0x20, 0x14, 0xFF, 0xDE, 0x25, 0xAF, 0x78, 0x42, 0x9B, 0xA0, 0x40, 0x23, 0x45, 0xB3, 0x82, 0x12, 0x2A, 0xE6, 0x49, 0x35, 0xC6, 0x3D, 0xDD, 0xE, 0x1D, 0x6A, 0xC1, 0x56, 0x55, 0x2D, 0xC1, 0x4, 0xED, 0x5C, 0x84, 0x51, 0x8B, 0xA7, 0x28, 0x9, 0x2D, 0xC4, 0xE5, 0x9B, 0xC0, 0x40, 0x3C, 0x4C, 0x90, 0xED, 0x73, 0x5E, 0xDB, 0x73, 0x59, 0x92, 0xCE, 0xC, 0x62, 0xA6, 0x4B, 0x46, 0x70, 0x87, 0xD4, 0xDA, 0x3D, 0x59, 0x48, 0x3C, 0x50, 0xCC, 0x5D, 0x49, 0x1B, 0xE8, 0x8D, 0xD9, 0x9B, 0xE0, 0x40, 0x48, 0xC2, 0xE8, 0xC8, 0x19, 0x24, 0x79, 0x55, 0x52, 0x65, 0x2B, 0x37, 0x3C, 0x5A, 0x36, 0xFD, 0xB, 0x8F, 0x62, 0xBD, 0x33, 0x72, 0x9B, 0xDC, 0x5C, 0x3D, 0x2F, 0x4B, 0x57, 0x6, 0xAD, 0xE9, 0x98, 0x0, 0x40, 0x3C, 0xD1, 0xEE, 0xC1, 0x61, 0x21, 0xE1, 0x34, 0x78, 0xA8, 0xF8, 0x63, 0x52, 0x9B, 0x4E, 0x20, 0x50, 0x4E, 0x28, 0xF7, 0x18, 0xBD, 0xF8, 0x41, 0x78, 0x4A, 0xC6, 0x62, 0x73, 0x93, 0xDC, 0x79, 0x98, 0x20, 0x40, 0x2A, 0xE8, 0xDE, 0x8A, 0x2E, 0x11, 0x4, 0x40, 0x1, 0xB1, 0x47, 0x3A, 0x1, 0x3E, 0xC, 0x4B, 0x32, 0xFE, 0x60, 0xC4, 0x53, 0x3C, 0xEE, 0x62, 0xA, 0x6B, 0xD1, 0x31, 0x6F, 0x4A, 0xF1, 0xB1, 0x98, 0x40, 0x40, 0x46, 0x9B, 0xC9, 0xD6, 0x63, 0xFE, 0x9F, 0x3D, 0x51, 0xF1, 0x3C, 0xF8, 0x37, 0x23, 0x9E, 0xB0, 0x21, 0x57, 0xE7, 0x79, 0x22, 0xBD, 0x9A, 0x41, 0x53, 0xC, 0x2C, 0x89, 0x6A, 0x1A, 0xD0, 0x41, 0x98, 0x60, 0x40, 0x3B, 0xE2, 0x13, 0x97, 0x25, 0x71, 0x57, 0xC1, 0x26, 0x75, 0x7, 0x3F, 0x47, 0x71, 0x76, 0x54, 0x58, 0xE3, 0xF3, 0x9D, 0x2, 0xB2, 0x36, 0x8A, 0x1E, 0x78, 0x24, 0x3E, 0x15, 0xB5, 0xE2, 0x5F, 0x98, 0x80, 0x40, 0x63, 0xD4, 0x17, 0xBE, 0x17, 0x21, 0x1C, 0xA1, 0x68, 0x51, 0x30, 0x7F, 0x34, 0x22, 0x40, 0xB5, 0x2F, 0xDF, 0x14, 0xE2, 0x60, 0x9B, 0xF6, 0xE2, 0x27, 0xB6, 0x1D, 0x2E, 0x5A, 0xC7, 0xF3, 0x6C, 0x98, 0xA0, 0x40, 0xE, 0xAC, 0xFB, 0x22, 0x29, 0x67, 0x64, 0x68, 0x5C, 0x5, 0xFF, 0xB8, 0x41, 0xAB, 0x5B, 0xE6, 0x7C, 0xA4, 0x52, 0xCB, 0x66, 0x71, 0xD0, 0xE9, 0x30, 0xF6, 0x4D, 0x97, 0x43, 0x40, 0x1C, 0xA1, 0x98, 0xC0, 0x40, 0x4A, 0x70, 0x70, 0x26, 0x2, 0xE7, 0x8A, 0x8F, 0x7A, 0x63, 0xBB, 0x51, 0x6B, 0xC8, 0x57, 0xA0, 0x25, 0xA5, 0x24, 0xD1, 0x4D, 0x6F, 0xE7, 0xDB, 0x55, 0xE3, 0x27, 0xE1, 0x61, 0x87, 0x38, 0x68, 0x98, 0xE0, 0x40, 0x72, 0xE1, 0x3F, 0x9C, 0x7C, 0x58, 0x2F, 0x20, 0x28, 0xF8, 0xAE, 0xBC, 0x4B, 0xC5, 0x33, 0x39, 0x7F, 0xA, 0x65, 0xAB, 0x47, 0x70, 0xD2, 0xFA, 0x61, 0x7B, 0x15, 0x98, 0x62, 0xDE, 0x7D, 0x69, 0x99, 0x0, 0x40, 0x5E, 0x91, 0xEF, 0x9B, 0x49, 0xCC, 0x46, 0x18, 0x17, 0x0, 0xBE, 0x1F, 0xE, 0x71, 0x4, 0x7D, 0x2A, 0x68, 0x3C, 0xFA, 0x3E, 0xB6, 0xDB, 0x4D, 0x69, 0x38, 0xF7, 0xEA, 0x39, 0x15, 0x38, 0x1C, 0x99, 0x20, 0x40, 0x68, 0x1E, 0x3F, 0xB6, 0x45, 0x3E, 0xF7, 0xA2, 0x7A, 0xC0, 0x94, 0x2, 0x64, 0xC2, 0x92, 0x81, 0x2B, 0xB0, 0xC8, 0x8B, 0x2B, 0xB6, 0xE1, 0x99, 0x28, 0x2, 0xAF, 0x22, 0x76, 0x21, 0x38, 0xB1, 0x99, 0x40, 0x40, 0x2E, 0x9E, 0x6C, 0x29, 0x22, 0x66, 0x6A, 0x73, 0x61, 0xE9, 0x90, 0x51, 0x54, 0x43, 0x90, 0xFA, 0x6F, 0xD6, 0x52, 0x4E, 0x37, 0xCC, 0xB8, 0x33, 0x35, 0xCA, 0xC9, 0x62, 0x62, 0xB7, 0x91, 0xEA, 0x99, 0x60, 0x40, 0x34, 0x24, 0xE7, 0x53, 0x5E, 0xC3, 0x78, 0x1E, 0x2E, 0x7C, 0xC5, 0x24, 0x33, 0x2F, 0x4C, 0xFE, 0x26, 0x34, 0x4B, 0x19, 0xF, 0xF7, 0xDA, 0xBC, 0x16, 0xD, 0xCA, 0x68, 0x4, 0xC6, 0x3A, 0xB4, 0x99, 0x80, 0x40, 0x59, 0xC4, 0x20, 0xD4, 0x2D, 0xE, 0x88, 0x87, 0x13, 0x37, 0x3F, 0x32, 0x4, 0x2C, 0x5D, 0xCE, 0x6B, 0xC5, 0x63, 0xD4, 0x7C, 0x70, 0x37, 0x1C, 0x3D, 0x41, 0x95, 0xEA, 0x53, 0xE3, 0xA3, 0x8A, 0x99, 0xA0, 0x40, 0x41, 0xAF, 0x2E, 0xBE, 0x38, 0x2, 0x29, 0xEC, 0x38, 0xA6, 0x36, 0xB, 0x6D, 0x5F, 0xF7, 0x49, 0x63, 0xB9, 0xB, 0x86, 0x60, 0xA8, 0xE5, 0x2D, 0x63, 0x81, 0x2F, 0xFA, 0x12, 0x57, 0x77, 0xAF, 0x99, 0xC0, 0x40, 0x3, 0xF, 0x4F, 0xA1, 0x45, 0x6A, 0xC0, 0x4C, 0x66, 0x9B, 0x8, 0xA9, 0x72, 0xE5, 0xA1, 0xEF, 0x7D, 0x37, 0x78, 0x7F, 0x1C, 0x65, 0xD2, 0xB, 0x55, 0x9D, 0x33, 0xDA, 0x31, 0x5C, 0x5F, 0xD2, 0x99, 0xE0, 0x39, 0x7B, 0x29, 0x4A, 0x29, 0x4, 0x19, 0xF8, 0xFE, 0x64, 0x8B, 0xAC, 0xD1, 0x21, 0x5D, 0x95, 0x42, 0x14, 0x11, 0xD3, 0xBA, 0x7A, 0x99, 0x77, 0x39, 0x26, 0x23, 0xCF, 0xF7, };
    int values = rand()%(1024);
    int rand_data[1676];
    for(int i = 0; i < values; i++)
    {
        rand_data[i]=rand();
    }
    int max_frag = 32;
    unsigned char* output=build_packets(rand_data,values,max_frag,0,38);
    for (auto i = 0; i < length; ++i)
        ASSERT_EQ(output[i], expected[i]) << "Failed for byte " RED_MSG << std::hex << i << std::dec << COLOR_END;
}