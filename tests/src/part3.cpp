#include <gtest/gtest.h>
#include <random>

#include "tests_utils.h"

#define RANDOM_ITERATIONS 1024

extern "C"
{
#include "hw2.h"
}

class part3_tests : public testing::Test
{
private:
    void SetUp() override {}
};

TEST_F(part3_tests, BasicPacket) //One Packet, 7 ints, big endian
{
// How many arrays are in the input packets
const int arrays = 1;

//All of the packets back-to-back, 31 is the number of bytes worth of packets
unsigned char input[31]={0x0, 0x0, 0x39, 0xA, 0x9D, 0x34, 0x6C, 0x3C, 0x1, 0x59, 0x94, 0x22, 0x1E, 0x73, 0xF5, 0x51, 0x77, 0x14, 0xAE, 0x37, 0x65, 0x1A, 0x49, 0x25, 0x9B, 0xFF, 0x98, 0x7F, 0x65, 0x34, 0x4};

//The correct output values we are expecting from the solution
int expected[1][7]={178074732, 1006721428, 572421109, 1366758574, 929372745, 630980504, 2137338884};
    int **output;
    int sizes_dut[arrays];
    
    //The size of each of the expected arrays (only 1 array of size 7 in this example)
    int expected_sizes[1] = {7};
    output=create_arrays(input, arrays, sizes_dut);
    for(int array = 0; array < arrays; array++)
    {
        ASSERT_EQ(sizes_dut[array], expected_sizes[array]) << "Wrong Size in array " RED_MSG << std::hex << array << std::dec << COLOR_END;
        for (int i = 0; i < expected_sizes[array]; i++)
        {
            ASSERT_EQ(output[array][i], expected[array][i]) << "Wrong Data in Array, Index " RED_MSG << std::hex << array << i << std::dec << COLOR_END;
        }
    }     
}

TEST_F(part3_tests, BasicPacketEndian) //One Packet, 7 ints, little endian
{
const int arrays = 1;

unsigned char input[31]={0x0, 0x0, 0x3B, 0x6C, 0x34, 0x9D, 0xA, 0x94, 0x59, 0x1, 0x3C, 0xF5, 0x73, 0x1E, 0x22,
                         0xAE, 0x14, 0x77, 0x51, 0x49, 0x1A, 0x65, 0x37, 0x98, 0xFF, 0x9B, 0x25, 0x4, 0x34, 0x65, 0x7F};

int expected[1][7]={178074732, 1006721428, 572421109, 1366758574, 929372745, 630980504, 2137338884};
    int **output;
    int sizes_dut[arrays];
    
    //The size of each of the expected arrays (only 1 array of size 7 in this example)
    int expected_sizes[1] = {7};
    output=create_arrays(input, arrays, sizes_dut);
    for(int array = 0; array < arrays; array++)
    {
        ASSERT_EQ(sizes_dut[array], expected_sizes[array]) << "Wrong Size in array " RED_MSG << std::hex << array << std::dec << COLOR_END;
        for (int i = 0; i < expected_sizes[array]; i++)
        {
            ASSERT_EQ(output[array][i], expected[array][i]) << "Wrong Data in Array, Index " RED_MSG << std::hex << array << i << std::dec << COLOR_END;
        }
    }     
}


TEST_F(part3_tests, 2BasicPacketsEndian) //Two Packets, 11 ints, little endian
{
const int arrays = 2;

unsigned char input[50]={0x4, 0x0, 0x23, 0xDA, 0x9A, 0x73, 0x2F, 0xD9, 0x2D, 0x43, 0x3D, 0x81, 0x9, 0x64, 0x2E,
                        0xB7, 0xDB, 0x73, 0x2A, 0x0, 0x0, 0x3B, 0x6C, 0x34, 0x9D, 0xA, 0x94, 0x59, 0x1, 0x3C, 0xF5, 0x73, 0x1E, 
                        0x22, 0xAE, 0x14, 0x77, 0x51, 0x49, 0x1A, 0x65, 0x37, 0x98, 0xFF, 0x9B, 0x25, 0x4, 0x34, 0x65, 0x7F};

int expected[2][7]={{178074732, 1006721428, 572421109, 1366758574, 929372745, 630980504, 2137338884},
                    {796105434, 1027812825, 778307969, 712235959}};
    int **output;
    int sizes_dut[arrays];
    
    int expected_sizes[2] = {7, 4};
    output=create_arrays(input, arrays, sizes_dut);
    for(int array = 0; array < arrays; array++)
    {
        ASSERT_EQ(sizes_dut[array], expected_sizes[array]) << "Wrong Size in array " RED_MSG << std::hex << array << std::dec << COLOR_END;
        for (int i = 0; i < expected_sizes[array]; i++)
        {
            ASSERT_EQ(output[array][i], expected[array][i]) << "Wrong Data in Array, Index " RED_MSG << std::hex << array << i << std::dec << COLOR_END;
        }
    }     
}

TEST_F(part3_tests, 3BasicPacket) //Three Packet, 15 ints, big endian
{
// How many arrays are in the input packets
const int arrays = 3;

//All of the packets back-to-back, 31 is the number of bytes worth of packets
unsigned char input[69]={0x0, 0x0, 0x29, 0x38, 0x88, 0x4F, 0xFC, 0x36, 0xDC, 0xE3, 0x3C, 0x18, 0xA2, 0x6D, 0xE7,
                        0x2E, 0x25, 0xEC, 0x65, 0x5, 0xA4, 0x20, 0xCF, 0x8, 0x0, 0x39, 0x33, 0x5D, 0xC6, 0xAC,
                        0x41, 0xC0, 0x93, 0x86, 0x6F, 0x99, 0x58, 0xA9, 0x7A, 0xA, 0x53, 0x7B, 0x68, 0x64, 0xBD,
                        0x5D, 0x45, 0xF, 0x33, 0x7C, 0x30, 0x2B, 0x67, 0x9D, 0x4, 0x0, 0x19, 0x37, 0x5D, 0xFA,
                        0xD3, 0x63, 0xED, 0x58, 0xDD, 0x2E, 0x3C, 0x86, 0xBF};

//The correct output values we are expecting from the solution
int expected[3][7]={
    {948457468, 920445756, 413298151, 774237285, 94642383},
    {928905939, 1676499165, 775718591},
    {861783724, 1103139718, 1872320681, 2047497083, 1751432541, 1158624124, 808150941}
};
    int **output;
    int sizes_dut[arrays];
    
    //The size of each of the expected arrays (only 1 array of size 7 in this example)
    int expected_sizes[3] = {5, 3, 7};
    output=create_arrays(input, arrays, sizes_dut);
    for(int array = 0; array < arrays; array++)
    {
        ASSERT_EQ(sizes_dut[array], expected_sizes[array]) << "Wrong Size in array " RED_MSG << std::hex << array << std::dec << COLOR_END;
        for (int i = 0; i < expected_sizes[array]; i++)
        {
            ASSERT_EQ(output[array][i], expected[array][i]) << "Wrong Data in Array, Index " RED_MSG << std::hex << array << i << std::dec << COLOR_END;
        }
    }     
}

TEST_F(part3_tests, 3BasicPacketEndian) //Three Packet, 23 ints, little endian
{
const int arrays = 1;

unsigned char input[101]={0x4, 0x0, 0x33, 0xB2, 0x1A, 0x43, 0x9, 0x4F, 0xEB, 0x3D, 0x6D, 0x77, 0x3A, 0x1F, 0x66,
                        0xF2, 0xD1, 0xD0, 0x62, 0xF0, 0x5D, 0x7E, 0x69, 0x16, 0x8F, 0x35, 0x6B, 0x0, 0x0, 0x4B,
                        0x54, 0xEB, 0x85, 0x19, 0xD6, 0x33, 0x2, 0x79, 0x1B, 0x7A, 0x70, 0x72, 0x9E, 0xC3, 0xE2,
                        0x6F, 0x36, 0x24, 0x5A, 0x79, 0xAC, 0x7C, 0xD5, 0x3F, 0x41, 0xC5, 0xB6, 0x72, 0x8B, 0xD3,
                        0x9B, 0x36, 0xF, 0x17, 0x25, 0x11, 0x8, 0x0, 0x43, 0x63, 0x9A, 0xC6, 0x3E, 0x2B, 0x5E,
                        0x8D, 0x17, 0x39, 0x91, 0xC4, 0x6F, 0xF1, 0xA6, 0xA, 0x5B, 0xA4, 0x20, 0xB8, 0x31,
                        0x1F, 0xD8, 0xA6, 0x1, 0x14, 0xE6, 0x8D, 0x78, 0x6B, 0x67, 0x50, 0x7F};

int expected[3][10]={
    {428206932, 2030187478, 1919973915, 1877132190, 2035950646, 1070955692, 1924580673, 916181899, 287643407},
    {155392690, 1832774479, 1713322615, 1657852402, 1769889264, 1798672150},
    {1053203043, 395140651, 1875153209, 1527424753, 834150564, 27711519, 2022565396, 2135975787}
};
    int **output;
    int sizes_dut[arrays];
    
    //The size of each of the expected arrays (only 1 array of size 7 in this example)
    int expected_sizes[3] = {9, 6, 8};
    output=create_arrays(input, arrays, sizes_dut);
    for(int array = 0; array < arrays; array++)
    {
        ASSERT_EQ(sizes_dut[array], expected_sizes[array]) << "Wrong Size in array " RED_MSG << std::hex << array << std::dec << COLOR_END;
        for (int i = 0; i < expected_sizes[array]; i++)
        {
            ASSERT_EQ(output[array][i], expected[array][i]) << "Wrong Data in Array, Index " RED_MSG << std::hex << array << i << std::dec << COLOR_END;
        }
    }     
}

// ---------- Start of Stressful tests -----------

TEST_F(part3_tests, 6ComplexPacketLength4Frags) //Three Packet, 665 ints, big endian
{
const int arrays = 6;

unsigned char input[665]={0xA, 0xE0, 0x8, 0x66, 0xB7, 0x41, 0xA6, 0x0, 0x20, 0x8, 0x6, 0x74, 0xF4, 0x74, 0xA, 0xC0, 0x8, 0x2B, 0x17, 0x3A, 0xF2, 0x0, 0xC0, 
    0x8, 0x3D, 0x72, 0x65, 0xA5, 0x14, 0x40, 0x9, 0x63, 0xC6, 0xEA, 0x42, 0xD, 0x20, 0x8, 0xA, 0x83, 0x30, 0xB1, 0x6, 0xC0, 0x8, 0x78, 0x36, 0x8A, 0x99, 0x8, 
    0x40, 0x8, 0x10, 0x87, 0x3D, 0x4C, 0x4, 0x80, 0x8, 0x12, 0xB5, 0x73, 0x26, 0x1, 0x0, 0x8, 0x71, 0x47, 0x7E, 0x82, 0x8, 0x80, 0x8, 0x4D, 0xDB, 0xFF, 0xA6, 
    0xE, 0x0, 0x8, 0x73, 0xFC, 0xB7, 0x2F, 0xD, 0xE0, 0x8, 0x4E, 0x4A, 0xC0, 0x8C, 0x9, 0xE0, 0x8, 0xF, 0x8C, 0x2A, 0xC8, 0xB, 0x40, 0x9, 0x6, 0xBC, 0x5D, 0x36, 
    0xE, 0xE0, 0x8, 0xD, 0x8C, 0x7A, 0xBB, 0x14, 0x0, 0x8, 0x49, 0xE7, 0x25, 0xAC, 0xF, 0x60, 0x8, 0x62, 0x1F, 0xE1, 0xBD, 0x6, 0xA0, 0x8, 0x47, 0xBE, 0x33, 0xB3, 
    0x4, 0x0, 0x8, 0x75, 0xAF, 0x88, 0xEA, 0x4, 0xE0, 0x8, 0x62, 0x67, 0x72, 0xA2, 0x4, 0x40, 0x8, 0x72, 0x1F, 0x26, 0x21, 0xE, 0x20, 0x8, 0x2C, 0x6D, 0xCF, 0x4C, 
    0x5, 0x60, 0x8, 0x19, 0xA5, 0xD1, 0x97, 0xA, 0x40, 0x8, 0xB, 0x48, 0xDC, 0xEC, 0x8, 0x0, 0x8, 0x35, 0xA8, 0xF0, 0x3E, 0x6, 0xE0, 0x9, 0x48, 0x2A, 0xAE, 0xDE, 0x6, 
    0x80, 0x8, 0x20, 0x5, 0x1B, 0x8F, 0xC, 0x40, 0x8, 0x23, 0xF5, 0x7A, 0x8E, 0x0, 0x0, 0x8, 0x75, 0x14, 0x2F, 0xC6, 0xC, 0xC0, 0x8, 0x3E, 0xA7, 0xC6, 0x87, 0xF, 0x0, 
    0x8, 0x25, 0x28, 0x59, 0xAB, 0x8, 0x20, 0x8, 0x52, 0x4F, 0xD6, 0xD2, 0x1, 0x40, 0x9, 0x7B, 0x8C, 0x28, 0xD4, 0xE, 0x40, 0x8, 0x5D, 0xD6, 0xEB, 0x55, 0xC, 0x20, 
    0x8, 0x4E, 0xE7, 0xC, 0x14, 0x5, 0xE0, 0x8, 0x30, 0xBF, 0xB4, 0x7D, 0x6, 0x0, 0x8, 0x1A, 0x70, 0xFF, 0xB8, 0x0, 0xA0, 0x8, 0x57, 0x81, 0x8B, 0x17, 0x0, 0xE0, 0x8, 
    0xA, 0x25, 0x27, 0xF4, 0xA, 0x80, 0x8, 0x4D, 0x27, 0x1A, 0x8B, 0x4, 0xA0, 0x8, 0x44, 0xE6, 0x2F, 0xA5, 0x8, 0xA0, 0x8, 0x1C, 0x28, 0xF4, 0x14, 0x8, 0x60, 0x8, 0x56, 
    0x2B, 0xE1, 0x3F, 0x14, 0x20, 0x8, 0xA, 0xCB, 0x18, 0x10, 0x9, 0x40, 0x8, 0x67, 0x12, 0x9C, 0x62, 0x4, 0xC0, 0x8, 0x57, 0xF5, 0xE9, 0xB4, 0x8, 0xE0, 0x8, 0x54, 0x5D, 
    0x29, 0x3C, 0x6, 0x20, 0x8, 0x19, 0x90, 0x27, 0x1B, 0xC, 0x80, 0x8, 0x21, 0x36, 0xE2, 0xE7, 0xC, 0x60, 0x8, 0x68, 0x7B, 0xE5, 0x48, 0x1, 0x20, 0x8, 0x20, 0x82, 0xF1, 
    0x1, 0x5, 0x0, 0x8, 0x27, 0x23, 0x75, 0x72, 0xC, 0xA0, 0x8, 0x34, 0x7C, 0xB7, 0xDB, 0x5, 0x40, 0x8, 0x14, 0xA7, 0x69, 0x1E, 0x4, 0x60, 0x8, 0x6A, 0xD, 0x68, 0xEA, 0xE, 
    0x60, 0x8, 0x52, 0x1E, 0x2F, 0x51, 0xA, 0xA0, 0x8, 0x3C, 0x8, 0x91, 0x6A, 0x0, 0x80, 0x8, 0x28, 0x25, 0x93, 0x4F, 0xD, 0xC0, 0x8, 0x32, 0x1C, 0xF, 0xFF, 0xD, 0x60, 0x8, 
    0x5E, 0xED, 0xC6, 0x24, 0xA, 0x0, 0x8, 0x5E, 0x21, 0x78, 0x22, 0x0, 0x60, 0x8, 0x68, 0xB1, 0x5B, 0x1A, 0xD, 0x40, 0x8, 0x43, 0x70, 0xB, 0xC9, 0xA, 0x20, 0x8, 0x13, 0xF7, 
    0x90, 0xE4, 0x6, 0x40, 0x8, 0x0, 0xEE, 0xF6, 0xA7, 0x0, 0x40, 0x8, 0x46, 0xCF, 0x3D, 0xB, 0x5, 0x80, 0x8, 0x7B, 0xBC, 0xB2, 0x24, 0x9, 0x0, 0x8, 0xE, 0x48, 0x1A, 0x35, 
    0x8, 0xC0, 0x8, 0x4B, 0xDB, 0x6A, 0x29, 0xE, 0xC0, 0x8, 0x62, 0xC4, 0x6A, 0x8B, 0x6, 0x60, 0x8, 0xF, 0x85, 0x2F, 0x7F, 0xE, 0x80, 0x8, 0x40, 0x65, 0x60, 0x30, 0x9, 0x80, 
    0x8, 0xD, 0xDE, 0xBC, 0xC8, 0x9, 0xA0, 0x8, 0x49, 0x7A, 0xF, 0x4, 0x9, 0x20, 0x8, 0x35, 0xE8, 0xD3, 0x13, 0xF, 0x80, 0x9, 0x48, 0x78, 0xF, 0xEF, 0xC, 0x0, 0x8, 0x32, 
    0xD2, 0xF5, 0xA, 0xD, 0xA0, 0x8, 0x2A, 0x82, 0xA8, 0x2B, 0xF, 0x20, 0x8, 0xD, 0xDB, 0xA5, 0x7E, 0x5, 0x20, 0x8, 0x1, 0xAD, 0x6E, 0x0, 0xD, 0x80, 0x8, 0x40, 0x6C, 0x3, 
    0xC4, 0x9, 0x60, 0x8, 0x53, 0x2E, 0x49, 0xDA, 0x10, 0x0, 0x9, 0x66, 0xD5, 0x9D, 0x81, 0x9, 0xC0, 0x8, 0x7A, 0x51, 0xBF, 0x4D, 0x5, 0xA0, 0x8, 0x32, 0x84, 0xC3, 0x18, 
    0xD, 0x0, 0x8, 0x50, 0xA5, 0xAB, 0xEF, 0x5, 0xC0, 0x8, 0x39, 0x2F, 0x89, 0xA7, 0xC, 0xE0, 0x8, 0x6F, 0x12, 0xE2, 0x8D, 0xA, 0x60, 0x8, 0x10, 0xA6, 0x3B, 0x3A, 0xF, 
    0x40, 0x8, 0x74, 0x43, 0xBC, 0x62, 0xB, 0x0, 0x8, 0x3C, 0xF7, 0x88, 0x11, 0xB, 0x20, 0x8, 0x3A, 0x9C, 0x6A, 0x71, 0x4, 0x20, 0x8, 0x6, 0x81, 0x29, 0x95, 0xE, 0xA0, 
    0x8, 0x69, 0x1F, 0xC8, 0x41};

int expected[6][29]={
    {1964257222, 108328052, 1187986699, 1756453658, 673551183, 1468107543, 1030907301, 170207220, 1900510850, 545452289, 2072783060},
    {1974438122, 109128085, 1914644001, 1779263722, 313881382, 1155936165, 1475733940, 1650946722, 656635250, 28143104, 346515742, 430297495, 
        2075963940, 847561496, 959416743, 817869949, 443613112, 428877595, 15660711, 260386687, 537205647, 1203647411, 2016840345, 1210756830},
    {900263998, 1380964050, 277298508, 1445716287, 1306263462, 472445972, 1272670761, 1415391548, 239606325, 904450835, 1729272930, 1395542490, 232701128, 
        1232736004, 2052177741, 260844232, 1579251746, 334991588, 189324524, 279329594, 1294408331, 1007194474, 722942706, 1723285926, 1022855185, 983329393, 113007926},
    {852686090, 1323764756, 603290254, 1752950088, 557245159, 880588763, 1051182727, 1863508621, 1353034735, 176369841, 1131416521, 1592641060, 1080820676, 713205803, 
        840699903, 1313521804, 1945941807, 745393996, 1574366037, 1377709905, 1080385584, 1763690561, 1657039499, 227310267, 623401387, 232498558, 1950596194, 1646256573, 
        1215827951},
    {1725275521},
    {1239885228, 181082128, 1673980482}
};
    int **output;
    int sizes_dut[arrays];
    
    int expected_sizes[6] = {11, 24, 27, 29, 1, 3};
    output=create_arrays(input, arrays, sizes_dut);
    for(int array = 0; array < arrays; array++)
    {
        ASSERT_EQ(sizes_dut[array], expected_sizes[array]) << "Wrong Size in array " RED_MSG << std::hex << array << std::dec << COLOR_END;
        for (int i = 0; i < expected_sizes[array]; i++)
        {
            ASSERT_EQ(output[array][i], expected[array][i]) << "Wrong Data in Array, Index " RED_MSG << std::hex << array << i << std::dec << COLOR_END;
        }
    }     
}